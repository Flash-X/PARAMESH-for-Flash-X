2022-12-01  Klaus Weide  <kweide@uchicago.edu>

	* flash_avoid_orrery/local_tree_build.F90,flash_avoid_orrery/mpi_amr_refine_blocks.F90,source/mpi_amr_check_derefine.F90,source/mpi_amr_edge_average_udt.F90,
	source/mpi_amr_get_remote_block.F90,source/mpi_amr_get_remote_block_fvar.F90,source/mpi_put_flux_buffer.F90:
	tweaks to avoid some errors or warnings from GCC 11.
	* source/mpi_morton_bnd.F90: fix PM_OPTIMIZE_MORTONBND_FETCHLIST
	code, wich references nxb,nyb,nzb, by using ASSOCIATE for PDG 1
	(for now).

2022-11-30  Klaus Weide  <kweide@uchicago.edu>

	* flash_avoid_orrery/amr_morton_process.F90,headers/paramesh_mpi_interfaces.F90,source/amr_1blk_guardcell_reset.F90,source/amr_initialize.F90,
	source/amr_mpi_find_blk_in_buffer.F90,source/mpi_amr_1blk_guardcell.F90,source/mpi_amr_1blk_restrict.F90,source/mpi_amr_comm_setup.F90,
	source/mpi_amr_guardcell.F90,source/mpi_lib.F90,source/mpi_morton_bnd.F90,source/mpi_morton_bnd_fluxcon.F90,source/mpi_morton_bnd_prolong.F90,
	source/mpi_morton_bnd_restrict.F90,source/mpi_pack_blocks.F90,source/mpi_unpack_blocks.F90,source/process_fetch_list.F90:
	resolve conflicts after merge from 'MultiPhysData' into
	'MultiPhysData+commpatt' git repository branch.
	* source/mpi_morton_bnd_restrict.F90: add 'Use
	paramesh_dimensions, ONLY: k2d, k3d' to fix compilation failure.
	* source/amr_mpi_find_blk_in_buffer.F90: comment out '#define DEBUG'.

2022-11-29  Klaus Weide  <kweide@uchicago.edu>

	* bittree/amr_initialize.F90: remove allocation of cell_* geometry
	arrays from here, since the arrays themselves were moved from
	the physicaldata module into pdg_t. Also comment out some
	other allocations (tflux_x, etc.), making this version more like
	the one in the "source" directory.

2022-11-08  Klaus Weide  <kweide@uchicago.edu>

	* headers/paramesh_mpi_interfaces.F90: update interfaces of
	mpiSet_message_sizes, mpi_amr_get_remote_block,
	mpiGet_Sbuffer_size_fluxes for PDG support.
	* source/mpi_set_message_sizes.F90: add 'ig' argument to
	 subroutine now called mpiSet_message_sizes, make the subroutine
	PDG-aware.
	* source/mpi_amr_get_remote_block.F90: change subroutine to take
	argument 'pdg'. Add ONLY to some USE statements. Include
	"Flashx_mpi_implicitNone.fh". Tweak / add some debugging output.
	* source/mpi_pack_blocks.F90: in mpiPack_blocks, use
	gr_thePdgDimens to get 'nvar'. Tweak USE statements for PDG
	support. Add 'pdg%nfluxes' to mpiGet_Sbuffer_size_fluxes call.
	Include "Flashx_mpi_implicitNone.fh".
	* source/empi_get_flux_buffer.F90: make subroutine
	mpiGet_flux_buffer PDG-aware. Change subroutine
	mpiGet_Sbuffer_size_fluxes to take 'nfluxes' as argument. Some
	cleanup.
	* flash_avoid_orrery/amr_migrate_tree_data.F90,
	flash_avoid_orrery/amr_morton_process.F90,
	flash_avoid_orrery/local_tree_build.F90,
	flash_avoid_orrery/mpi_amr_exchange_nodetype.F90,
	flash_avoid_orrery/mpi_amr_refine_blocks.F90,
	headers/mpi_morton.F90, headers/paramesh_dimensions.F90,
	headers/prolong_arrays.F90, source/amr_migrate_tree_data.F90,
	source/fill_old_loc.F90, source/local_tree_build.F90,
	source/process_fetch_list.F90, source/rationalize_fetch_list.F90,
	amr_1blk_guardcell_reset.F90: clean up some USE statements,
	removing some that are unnecessary and adding ONLY to others.
	* source/amr_mpi_find_blk_in_buffer.F90: add output statements for
	debugging, disabled by default, to this crucial subroutine.
	* source/amr_1blk_cc_prol_genorder.F90: correct
	'first_call_overall' logic, tweak Robodoc synopsis.
	* source/amr_prolong_cc_fun_init.F90: correct n[xz]b associations.
	* source/mpi_lib.F90: clean up some USE paramesh_dimensions
	statements, removing some that are unnecessary and adding ONLY:
	ndim to others.
	* source/mpi_unpack_blocks.F90: clean up some USE
	paramesh_dimensions statements.
	* source/amr_check_refine.F90, source/mpi_amr_check_derefine.F90, source/mpi_amr_local_surr_blks_lkup.F90: use paramesh_dimensions
	with ONLY.
	* source/amr_morton_order.F90: remove some unnecessay USE statements.
	* source/mpi_amr_global_domain_limits.F90: remove unnecessary
	REORDER directives and Use paramesh_dimensions statements.
	* flash_avoid_orrery/amr_initialize.F90,
	flash_avoid_orrery/physicaldata.F90, headers/gr_pmPdgDecl.F90,
	headers/paramesh_interfaces.F90, headers/physicaldata.F90,
	source/amr_1blk_fc_prol_dbz.F90, source/amr_block_geometry.F90,
	source/amr_close.F90, source/amr_initialize.F90,
	source/gr_pdgClose.F90, source/gr_pdgInit.F90,
	source/mpi_amr_1blk_restrict.F90,
	source/mpi_amr_prolong_fc_divbconsist.F90,
	source/mpi_amr_restrict_fulltree.F90: move cell_* geometry arrays
	from the physicaldata module into pdg_t.
	* flash_avoid_orrery/mpi_amr_derefine_blocks.F90: update for PDG
	support.
	* headers/paramesh_interfaces.F90,
	source/amr_1blk_cc_prol_gen_unk_fun.F90,
	source/mpi_amr_1blk_guardcell_c_to_f.F90,
	source/mpi_amr_prolong.F90: add pdg,ig arguments to amr_1blk_cc_prol_gen_unk_fun.
	* headers/paramesh_interfaces.F90,
	source/amr_1blk_to_perm.F90,
	source/mpi_amr_prolong.F90: add pdg,ig arguments to amr_1blk_to_perm.
	* headers/paramesh_interfaces.F90,
	source/amr_restrict_unk_genorder.F90,
	source/amr_restrict_unk_fun.F90: add ig dummy argument to amr_restrict_unk_genorder.
	* source/amr_1blk_cc_prol_work_mg.F90: make PDG-aware using DEFAULT_PDGNO.
	* flash_avoid_orrery/gr_initParameshArrays.F90,source/amr_close.F90: add ONLY
	to USE paramesh_dimensions.
	* source/mpi_morton_bnd_restrict.F90: add ONLY to USE physicaldata.
	* source/mpi_morton_bnd.F90,source/mpi_morton_bnd_fluxcon.F90,source/mpi_morton_bnd_prolong.F90:
	tweaked for PDG, use DEFAULT PDG for the purpose of setting
	'nguarda', make some USE statements more specific.
	* source/mpi_get_edge_buffer.F90,source/mpi_put_edge_buffer.F90,mpi_put_edge_buffer_1blk.F90:
	PDG-related changes (using ASSOCIATE), more specific USE
	statements, some cleanup.
	* source/mpi_get_buffer.F90,source/mpi_put_buffer.F90: PDG-related
	and other adaptations and cleanup.
	* source/mpi_put_buffer.F90: remove unused logical variables l_srl_only, ldiag.

2022-11-03  Klaus Weide  <kweide@uchicago.edu>

	* source/mpi_amr_comm_setup.F90: rename called routine to
	mpiSet_message_sizes.
	* source/mpi_amr_1blk_guardcell.F90: call routine
	mpi_amr_get_remote_block with additional argument 'pdg'. Add code
	for debugging, mostly commented out.
	* source/amr_1blk_cc_prol_work_genorder.F90: make PDG-aware using DEFAULT_PDGNO.
	* source/amr_1blk_cc_prol_inject.F90: make PDG-aware.

2022-11-02  Klaus Weide  <kweide@uchicago.edu>

	* source/mpi_amr_1blk_guardcell.F90,source/mpi_amr_comm_setup.F90:
	comment out (ifdef MAYBE_UNNECESSARY) nlayers-increasing code for
	cases of large nguard-to-n[xyz]b ratios: (1) it is unclear how
	this helped at all (maybe it is a leftover from old PARAMESH
	versions that had dedicated f_to_c routines for guard cell filling
	at f/c boundaries); (2) nxb/nguard < 2 etc. should be avoided
	anyway for various reasons; (3) for valid operations, this code
	needs to be enabled (or disabled) consistently between the two
	source files, which is rather ugly and error-prone.

	* source/amr_perm_to_1blk.F90,source/mpi_amr_comm_setup.F90,source/mpi_get_buffer.F90:
	use PDG-specific constants and variables where needed, instead of
	global ones from the paramesh_dimensions and physicaldata modules.

	* headers/paramesh_interfaces.F90,source/amr_restrict_unk_fun.F90,source/mpi_amr_1blk_restrict.F90,source/mpi_amr_restrict_fulltree.F90:
	add ig to amr_restrict_unk_fun interface.

	* source/mpi_amr_1blk_guardcell.F90,source/mpi_amr_prolong.F90:
	supply 'ig' argument to flash_(un)?convert_cc_hook calls.

2022-10-31  Klaus Weide  <kweide@uchicago.edu>

	* bittree/amr_initialize.F90,flash_avoid_orrery/amr_initialize.F90,
	flash_avoid_orrery/physicaldata.F90,headers/gr_pmPdgDecl.F90,
	headers/physicaldata.F90,source/amr_initialize.F90,
	source/amr_close.F90,source/gr_pdgClose.F90,source/gr_pdgInit.F90,
	source/mpi_amr_guardcell.F90: move gcell_on_cc flag array into
	pdg_t.

	* flash_avoid_orrery/physicaldata.F90,headers/physicaldata.F90:
	add TARGET attribute to various mask and interpolation-order
	arrays.

2022-10-28  Klaus Weide  <kweide@uchicago.edu>

	* source/mpi_amr_guardcell.F90: tweak generation of 'nlayers'
	argument to amr_guardcell_onePdg in amr_guardcell_pdgNo for pdgNo
	ranges, and skip action completely if a PDG has no guard cells.
	Tweak handling of (mostly ignored) 'nlayers' argument in amr_guardcell_onePdg.

2022-10-26  Klaus Weide  <kweide@uchicago.edu>

	* headers/paramesh_interfaces.F90: add amr_prolong_gen_unk1_fun
	interface. Change intent for some recv arguments to IN. Add
	explicit '#include "Simulation.h"'. The recv argument to
	amr_prolong_gen_unk1_fun is now declared CONTIGUOUS_INTENT(IN), dimension(:,:,:,:).

	* source/amr_1blk_cc_prol_inject.F90,amr_1blk_cc_prol_linear.F90,amr_1blk_cc_prol_genorder.F90:
	Change intent for recv arguments to IN.

	* source/amr_1blk_cc_prol_gen_unk_fun.F90: use gr_thePdgDimens
	from paramesh_dimensions (so far only for nvar).
	Use explicit interface for amr_prolong_gen_unk1_fun.
	Pass arguments pdg,ig when calling mr_prolong_gen_unk1_fun.

2022-10-20  Klaus Weide  <kweide@uchicago.edu>

	* headers/gr_pmPdgDecl.F90: add 8 more slots to type pdgConst_t:
	nspecies, speciesBegin, speciesEnd, tempVar, gamcVar, gameVar,
	sumyMscalar, yeMscalar.

2022-10-14  Klaus Weide  <kweide@uchicago.edu>

	* source/amr_1blk_guardcell_srl.F90: added ig argument to
	amr_1blk_bcset calls.

	* headers/paramesh_interfaces.F90: added ig dummy argument to
	amr_1blk_bcset interface.

	* headers/gr_pmPdgDecl.F90: correct type of 7 slots densVar...velzVar
	to integer.

2022-10-13  Klaus Weide  <kweide@uchicago.edu>

	* gr_pmPdgDecl.F90: add 7 slots densVar...velzVar to derived type
	pdgConst_t, for generalizing previously hardwired references to
	DENS_VAR,...,VELZ_VAR occurring in various Grid unit source files
	to the multi-PDG situation.

2022-10-11  Klaus Weide  <kweide@uchicago.edu>

	* bittree/mpi_amr_redist_blk.F90: use gr_pmPdgDecl module. Narrow
	USE statements.

	* amr_morton_order_bittree.F90: use explicit interface for
	amr_redist_blk.

2022-10-10  Klaus Weide  <kweide@uchicago.edu>

	* bittree/amr_initialize.F90, bittree/mpi_amr_redist_blk.F90,
	flash_avoid_orrery/amr_initialize.F90, headers/gr_pmPdgDecl.F90,
	headers/paramesh_interfaces.F90, source/amr_initialize.F90,
	source/fill_old_loc.F90, source/gr_pdgInit.F90,
	source/mpi_amr_redist_blk.F90, source/send_block_data.F90: add
	support for data redistribution (as part of regridding) for UNK
	data of all PDGs. Can be suppressed with new `doRedist` flag in
	the pdg_t derived type (for now initialized to .TRUE.).

2022-10-07  Klaus Weide  <kweide@uchicago.edu>

	* headers/paramesh_interfaces.F90: add pdg,ig dummy args to
	amr_1blk_cc_prol_linear, amr_1blk_cc_prol_genorder interfaces.

	* source/amr_1blk_cc_prol_genorder.F90: add pdg,ig args, make
	implementation PDG-specifc.

	* source/amr_1blk_cc_prol_linear.F90: add pdg arg, make
	implementation PDG-specifc.

	* source/amr_1blk_cc_prol_gen_unk_fun.F90: Temporary changes to
	call a couple of subsidiary rountines with pdg,ig arguments
	(referring to the DEFAULT pdg, for now).

2022-10-04  Klaus Weide  <kweide@uchicago.edu>

	* flash_avoid_orrery/amr_initialize.F90: use #include
	"gr_pmPdgDimenInit.fh" for initialization also in LIBRARY mode.

	* headers/paramesh_interfaces.F90: update
	amr_prolong_cc_fun_init interface.

	* source/amr_prolong_cc_fun_init.F90: add pdg,ig dummy args.

	* source/amr_prolong_fun_init.F90: call amr_prolong_cc_fun_init in
	a loop over groups.

2022-09-30  Klaus Weide  <kweide@uchicago.edu>

	* flash_avoid_orrery/amr_initialize.F90: add a crucial piece
	piece of PDG initialization: call gr_pdgInitOne in a loop, once
	for each PDG.

2022-09-29  Klaus Weide  <kweide@uchicago.edu>

	* headers/paramesh_dimensions.F90: introduce 'include
	"gr_pmPdgDimenInit.fh"' for initializing PARAMESH constants
	hardwired for several physicaldata groups. This relies on support
	of the Flash-X configuration mechanism (setup.py) for generating
	the file to included (and other files included by THAT file).

2022-06-21  Klaus Weide  <kweide@uchicago.edu>

	* source/mpi_amr_1blk_guardcell.F90: remove stray character '3'.

2022-05-27  Klaus Weide  <kweide@uchicago.edu>

	* source/gr_pdgInit.F90: new file to support MultiPhysData code changes ("pdg stuff").

	* source/gr_pdgDimenInitOne.F90: ditto.

	* source/gr_pdgClose.F90: ditto.

	* headers/paramesh_interfaces.F90: 
	bringing in MultiPhysData code changes ("pdg stuff"): new
	pdgNo,pdg, and/or ig args to many routines; some variant routines;
	"use gr_pmPdgDecl" where needed; renamed some routines; introduced
	looping over groups in some routines.

	* headers/paramesh_mpi_interfaces.F90: ditto.

	* headers/gr_pmPdgDecl.F90: ditto.

	* headers/paramesh_dimensions.F90: ditto.

	* headers/physicaldata.F90: ditto.

	* headers/prolong_arrays.F90: ditto.

	* headers/timings.F90: ditto.

	* source/amr_1blk_cc_cp_remote.F90: ditto.

	* source/amr_1blk_ec_cp_remote.F90: ditto.

	* source/amr_1blk_fc_cp_remote.F90: ditto.

	* source/amr_1blk_guardcell_srl.F90: ditto.

	* source/amr_1blk_nc_cp_remote.F90: ditto.

	* source/amr_close.F90: ditto.

	* source/amr_initialize.F90: ditto.

	* source/amr_mpi_find_blk_in_buffer.F90: ditto.

	* source/amr_perm_to_1blk.F90: ditto.

	* source/amr_set_runtime_parameters.F90: ditto.

	* source/mpi_amr_1blk_guardcell.F90: ditto.

	* source/mpi_amr_1blk_guardcell_c_to_f.F90: ditto.

	* source/mpi_amr_1blk_restrict.F90: ditto.

	* source/mpi_amr_comm_setup.F90: ditto.

	* source/mpi_amr_edge_average_udt.F90: ditto.

	* source/mpi_amr_edge_average_vdt.F90: ditto.

	* source/mpi_amr_edge_diagonal_check.F90: ditto.

	* source/mpi_amr_flux_conserve.F90: ditto.

	* source/mpi_amr_flux_conserve_udt.F90: ditto.

	* source/mpi_amr_flux_conserve_vdt.F90: ditto.

	* source/mpi_amr_get_remote_block.F90: ditto.

	* source/mpi_amr_get_remote_block_fvar.F90: ditto.

	* source/mpi_amr_guardcell.F90: ditto.

	* source/mpi_amr_prolong.F90: ditto.

	* source/mpi_amr_prolong_fc_divbconsist.F90: ditto.

	* source/mpi_amr_restrict.F90: ditto.

	* source/mpi_amr_restrict_bnd_data.F90: ditto.

	* source/mpi_amr_restrict_bnd_data_vdt.F90: ditto.

	* source/mpi_amr_restrict_fulltree.F90: ditto.

	* source/mpi_get_buffer.F90: ditto.

	* source/mpi_get_edge_buffer.F90: ditto.

	* source/mpi_get_flux_buffer.F90: ditto.

	* source/mpi_pack_blocks.F90: ditto.

	* source/mpi_pack_fluxes.F90: ditto.

	* source/mpi_put_buffer.F90: ditto.

	* source/mpi_put_edge_buffer.F90: ditto.

	* source/mpi_put_edge_buffer_1blk.F90: ditto.

	* source/mpi_put_flux_buffer.F90: ditto.

	* source/mpi_set_message_limits.F90: ditto.

	* source/mpi_unpack_blocks.F90: ditto.

	* source/mpi_unpack_fluxes.F90: ditto.

	* bittree/amr_initialize.F90: ditto.

	* flash_avoid_orrery/amr_initialize.F90: ditto.

	* flash_avoid_orrery/physicaldata.F90: ditto.

2022-05-23  Klaus Weide  <kweide@uchicago.edu>

	* source/mpi_set_message_limits.F90 (mpi_set_message_limits):
	added (1) warnings (ifdef DEBUG_LITE) and (2) attempted sane
	fallback if a call is detected where the requested extent of the
	data buffer in a dimension is larger than what the message segment
	contains according to its "dtype".

	* source/mpi_amr_restrict.F90 (amr_restrict): set lfulltree True
	for "call mpi_amr_1blk_restrict" UNLESS filling guardcells.

	* source/mpi_amr_guardcell.F90 (amr_guardcell): pass proper
	"ntypeMax" argument in "mpi_amr_comm_setup" call, so the callee
	can activate a LEAF(-and-neccessary-parents)-only comm pattern if,
	for example, Grid_fillGuardCells was called with selectBlockType=.TRUE.

	* source/mpi_amr_comm_setup.F90 (mpi_amr_comm_setup): additional
	optional arguments for selecting (ranges of) node types and/or
	refinement levels; only partially implemented.
	(mpi_amr_comm_setup): activate the proper comm pattern in the new
	way, i.e., by calling gr_pmActivateCommPattern (directly or via
	the old-style calls like "mpi_amr_read_guard_comm" than now
	basically do the same thing.
	(mpi_amr_comm_setup): set the current "strt_buffer", still a
	global variable, from the active comm pattern.

	* source/mpi_amr_1blk_restrict.F90: minor cleanups througout.
	(mpi_amr_1blk_restrict): updated the "call mpi_amr_comm_setup"
	statement. Now pass the value of received "lfulltree" flag on to
	"mpi_amr_comm_setup", so the latter can use it for determining
	whether full or ancillary restriction is called for.
	(mpi_amr_1blk_restrict): skip unneeded blocks in the post-comm
	processing loop if we are dealing with ancillary restriction.

	* source/mpi_amr_1blk_guardcell.F90: 
	(amr_1blk_guardcell): added optional "parentPresentRegions" argument.
	(amr_1blk_guardcell): added code to create a set of bit flags that
	mark guard cell regions than MUST be filled (in additions to ones
	that CAN be locally filled), if "parentPresentRegions" is not present.
	(amr_1blk_guardcell): modified the code that checks for the need to
	fill guard cells of the parent block.
	(amr_1blk_guardcell): added debugging statements, mostly commented out.
	(amr_1blk_guardcell): the effective gcregion flag mask gets cached.
	(amr_1blk_guardcell): disabled some code for edge and node
	variables using FLASH_PMFEATURE_UNUSED.
	(amr_1blk_guardcell): pass effective gcregion flag mask to
	subroutines "amr_1blk_guardcell_srl", "flash_convert_cc_hook"
	called for the parent block where necessary to allow callees to
	skip acting on some gc regions.

	* source/amr_mpi_find_blk_in_buffer.F90: 
	(amr_mpi_find_blk_in_buffer): updated error and corner case handling.

	* source/amr_1blk_fc_cp_remote.F90: 
	(amr_1blk_fc_cp_remote): added warnings and possible recovery in
	case the data segment found in temprecv_buf holds less data than
	expected.

	* source/amr_1blk_cc_cp_remote.F90: 
	(amr_1blk_cc_cp_remote): added warnings and possible recovery in
	case the data segment found in temprecv_buf holds less data than
	expected.

	* headers/paramesh_mpi_interfaces.F90 (mpi_amr_comm_setup):
	updated explicit interface for subroutine.

	* headers/paramesh_interfaces.F90 (amr_1blk_guardcell): 
	updated explicit interface for subroutine.

	* flash_avoid_orrery/amr_morton_process.F90 (amr_morton_process):
	added one variant pattern each for gc and restrict comms.
	(amr_morton_process_flash): ditto.

2022-05-20  Klaus Weide  <kweide@uchicago.edu>

	* source/amr_morton_process.F90: 
	(amr_morton_process): added one variant pattern each for gc and restrict comms.

	* source/mpi_morton_bnd_restrict.F90: 
	(mpi_morton_bnd_restrict): compute a variant pattern if subPatNo
	is given with value GRID_SUBPAT_RESTRICT_ANC. Use
	gr_pmCommPatternPtr to get a pointer to the proper pattern slot.

	* source/mpi_morton_bnd.F90: 
	(mpi_morton_bnd): compute a variant pattern if subPatNo
	is given with value GRID_SUBPAT_GC_OPT. Use
	gr_pmCommPatternPtr to get a pointer to the proper pattern slot.

	* headers/paramesh_mpi_interfaces.F90: 
	(process_fetch_list): changed "pattern" argument to POINTER_INTENT_IN.
	(mpi_morton_bnd): added optional arg subPatNo to interface.
	(mpi_morton_bnd_restrict): added optional arg subPatNo to
	interface.

	* source/process_fetch_list.F90: edited Robodoc header.
	(process_fetch_list): changed "pattern" argument to POINTER_INTENT_IN.
	(process_fetch_list): added some debug output of questionable use,
	#ifdef DEBUG_XTRA.
	(process_fetch_list): added "call gr_pmPrintCommPattern" at the
	end, #ifdef DEBUG.

	* source/mpi_lib.F90 (mpi_xchange_blocks): tighten buffer overrun
	tests in three places (if (amr_error_checking)).

	* source/mpi_amr_local_surr_blks_lkup.F90: minor comment edits.

	* source/amr_initialize.F90: removed trailing spaces.

	* source/amr_1blk_guardcell_srl.F90: added
	"presentRegions" optional argument to "amr_1blk_guardcell_srl" interface.
	(amr_1blk_guardcell_srl): added loghic for skipping some guard
	cell regions if they are not included in "presentRegions" flags.
	(amr_1blk_guardcell_srl): some other minor additions borrowed from
	"PmAsyncExp" code variant.

	* source/amr_1blk_guardcell_reset.F90 (amr_1blk_guardcell_reset):
	added "pcache_gcregions" variables.

	* source/amr_1blk_cc_cp_remote.F90: 
	(amr_1blk_cc_cp_remote): added DEBUG_LITE code; it should only
	print if something goes wrong.

	* headers/physicaldata.F90 (physicaldata): added
	"pcache_gcregions" variables.

	* headers/paramesh_interfaces.F90 (amr_1blk_guardcell_srl): added
	"presentRegions" optional argument to "amr_1blk_guardcell_srl" interface.

	* headers/gr_pmCommPatternData.F90 (gr_pmCommPatternData): added
	space for alternative comm patterns for GC filling and restriction.
	(gr_pmDeallocateCommPatterns): removed unused local variable;
	initialize "id" component.
	(gr_pmInitCommPatterns): added for debugging. Note that the
	pattern has to be provided as a POINTER argument. Note hardwired MAXPRINT.

	* headers/gr_pmCommDataTypes.F90 (gr_pmCommDataTypes): added "id"
	component to gr_pmCommPattern_t.
	(gr_pmCommDataTypes): added constants GRID_SUBPAT_GC_DEFAULT=1,
	GRID_SUBPAT_GC_OPT=2, etc.

	* flash_avoid_orrery/physicaldata.F90 (physicaldata): added
	"pcache_gcregions" variables.

2022-05-13  Klaus Weide  <kweide@uchicago.edu>

	* utilities/multigrid/mpi_amr_store_comm_info_mg.F90: kept
	around, but not compiled or used by any Flash-X code.
	(mpi_amr_write_guard_comm_mg): obsolete version, could be updated
	to use gr_pmCommPatternData, kept for reference.
	(mpi_amr_read_guard_comm_mg): ditto.
	(mpi_amr_write_prol_comm_mg): ditto.
	(mpi_amr_read_prol_comm_mg): ditto.
	(mpi_amr_write_flux_comm_mg): ditto.
	(mpi_amr_read_flux_comm_mg): ditto.
	(mpi_amr_write_restrict_comm_mg): ditto.
	(mpi_amr_read_restrict_comm_mg): ditto.

	* utilities/multigrid/amr_mg_common.F90 (amr_mg_common): kept
	around, but not compiled or used by any Flash-X code.
	(amr_mg_common):  renamed "max_no_to_send_*" to "num_recipient_pes_*"
	because	this better expresses the meaning.

	* source/process_fetch_list.F90: added ONLY to many
	USE statements. included "Flashx_mpi_implicitNone.fh".
	added "pattern" first dummy argument with intent(inout).
	(process_fetch_list): renamed "max_no_to_be_received" to
	"num_sending_pes", "max_no_to_send" to "num_recipient_pes" because
	it better expresses the meaning.
	(process_fetch_list): use "pattern" for references to
	"commatrix_send", "to_be_sent", "commatrix_recv",
	"to_be_received", "num_recipient_pes", "strt_buffer".
	(process_fetch_list): use local strtBuffer, with copy of the value
	in the pattern.

	* source/mpi_unpack_fluxes.F90: 
	(mpi_unpack_fluxes): new "commatrixRecv" first dummy argument.
	(mpi_unpack_fluxes): included "Flashx_mpi_implicitNone.fh" and
	"FortranLangFeatures.fh". removed now unnecessary "use mpi_morton".
	(mpi_unpack_fluxes): use "commatrixRecv" instead of global array.

	* source/mpi_unpack_edges.F90: 
	(mpi_unpack_edges): new "commatrixRecv" first dummy argument.
	(mpi_unpack_edges): included "Flashx_mpi_implicitNone.fh" and
	"FortranLangFeatures.fh". removed now unnecessary "use mpi_morton".
	(mpi_unpack_edges): use "commatrixRecv" instead of global array.

	* source/mpi_unpack_blocks.F90: 
	(mpi_unpack_blocks): new "commatrixRecv" first dummy argument.
	(mpi_unpack_blocks): included "Flashx_mpi_implicitNone.fh" and
	"FortranLangFeatures.fh". removed now unnecessary "use mpi_morton".
	(mpi_unpack_blocks): use "commatrixRecv" instead of global array.
	(mpi_Rbuffer_size): new "pattern" first dummy argument.
	(mpi_Rbuffer_size): added "use gr_pmCommDataTypes", removed unnecessary "use mpi_morton".
	Removed "Include 'mpif.h'". sanitized some indentation.
	(mpi_Rbuffer_size): use "pattern" for references to
	"commatrix_recv", "to_be_received".

	* source/mpi_pack_fluxes.F90: 
	(mpi_pack_fluxes): new "pattern" first dummy argument.
	(mpi_pack_fluxes): added "use gr_pmCommDataTypes", added ONLY to
	"use mpi_morton".
	(mpi_pack_fluxes): use "pattern" for references to
	"commatrix_send", "to_be_sent", "commatrix_recv", "to_be_received".

	* source/mpi_pack_edges.F90: 
	(mpi_pack_edges): new "pattern" first dummy argument.
	(mpi_pack_edges): added "use gr_pmCommDataTypes", added ONLY to
	"use mpi_morton".
	(mpi_pack_edges): use "pattern" for references to
	"commatrix_send", "to_be_sent", "commatrix_recv", "to_be_received".

	* source/mpi_pack_blocks.F90: 
	(mpi_pack_blocks): new "pattern" first dummy argument.
	(mpi_pack_blocks): added "use gr_pmCommDataTypes", added ONLY to
	"use mpi_morton".
	(mpi_pack_blocks): use "pattern" for references to
	"commatrix_send", "to_be_sent", "commatrix_recv", "to_be_received".
	(mpi_Sbuffer_size): new "pattern" first dummy argument.
	(mpi_Sbuffer_size): removed unnecessary "use mpi_morton". included
	"Flashx_mpi_implicitNone.fh". sanitized some indentation.
	(mpi_Sbuffer_size): use "pattern" for references to
	"commatrix_send", "to_be_sent".

	* source/mpi_pack_fluxes.F90: 
	(mpi_pack_fluxes): new "pattern" first dummy argument.
	(mpi_pack_fluxes): added "use gr_pmCommDataTypes", added ONLY to
	"use mpi_morton".
	(mpi_pack_fluxes): use "pattern" for references to
	"commatrix_send", "to_be_sent", "commatrix_recv", "to_be_received".

	* source/mpi_pack_edges.F90: 
	(mpi_pack_edges): new "pattern" first dummy argument.
	(mpi_pack_edges): added "use gr_pmCommDataTypes", added ONLY to
	"use mpi_morton".
	(mpi_pack_edges): use "pattern" for references to
	"commatrix_send", "to_be_sent", "commatrix_recv", "to_be_received".

	* source/mpi_pack_blocks.F90: 
	(mpi_pack_blocks): new "pattern" first dummy argument.
	(mpi_pack_blocks): added "use gr_pmCommDataTypes", added ONLY to
	"use mpi_morton".
	(mpi_pack_blocks): use "pattern" for references to
	"commatrix_send", "to_be_sent", "commatrix_recv", "to_be_received".
	(mpi_Sbuffer_size): new "pattern" first dummy argument.
	(mpi_Sbuffer_size): removed unnecessary "use mpi_morton". included
	"Flashx_mpi_implicitNone.fh". sanitized some indentation.
	(mpi_Sbuffer_size): use "pattern" for references to
	"commatrix_send", "to_be_sent".

	* source/mpi_morton_bnd_restrict.F90: updated RoboDocs text.
	removed unnecessary REORDER directives.
	(mpi_morton_bnd_restrict): included "Flashx_mpi_implicitNone.fh".
	added ONLY to "use mpi_morton". added USE
	for "gr_pmCommDataTypes", "gr_pmCommPatternData".
	introduced local "pattern" pointer. have it
	point to the proper pattern, then pass it to "process_fetch_list".


	* source/mpi_morton_bnd_prolong.F90: updated RoboDocs text.
	removed unnecessary REORDER directives.
	(mpi_morton_bnd_prolong): included "Flashx_mpi_implicitNone.fh".
	added ONLY to "use mpi_morton". added USE
	for "gr_pmCommDataTypes", "gr_pmCommPatternData".
	introduced local "pattern" pointer. have it
	point to the proper pattern, then pass it to "process_fetch_list".


	* source/mpi_morton_bnd_fluxcon.F90: updated RoboDocs text.
	(mpi_morton_bnd_fluxcon): included "Flashx_mpi_implicitNone.fh".
	added ONLY to "use mpi_morton". added USE
	for "gr_pmCommDataTypes", "gr_pmCommPatternData".
	introduced local "pattern" pointer. have it
	point to the proper pattern, then pass it to "process_fetch_list".


	* source/mpi_morton_bnd.F90: updated RoboDocs text.
	(mpi_morton_bnd): included "Flashx_mpi_implicitNone.fh".
	added ONLY to "use mpi_morton". added USE
	for "gr_pmCommDataTypes", "gr_pmCommPatternData".
	introduced local "pattern" pointer. have it
	point to the proper pattern, then pass it to "process_fetch_list".

	* source/mpi_lib.F90 (mpi_array_allocate): removed "pe_source" allocation.
	(mpi_array_allocate): removed global allocations now handled by "gr_pmCommPatternData".
	(mpi_array_deallocate): removed some allocations.
	(mpi_array_deallocate): instead, call gr_pmDeallocateCommPatterns.
	(mpi_xchange_blocks): new "pattern" dummy argument.
	(mpi_xchange_blocks): added ONLY to "use mpi_morton".
	(mpi_xchange_blocks): use "pattern" for references to
	"commatrix_send" and "commatrix_recv".
	(mpi_xchange_tree_info): disabled.

	* source/mpi_get_buffer.F90 (mpi_get_buffer): include
	"Flashx_mpi_implicitNone.fh". removed unnecessary "use mpi_morton".
	(mpi_get_Sbuffer_size): ditto.

	* source/mpi_amr_store_comm_info.F90.save: saved a copy of
	(partially modfied) original "mpi_amr_store_comm_info.F90" here.

	* source/mpi_amr_store_comm_info.F90: shortened a lot, taking
	advantage of new functionality in gr_pmCommPatternData.
	"mpi_amr_write_*_comm" sobroutines are now no-ops.
	(mpi_amr_read_guard_comm): essentially just activates the proper
	comm pattern by calling the new "gr_pmActivateCommPattern", then
	assigns the proper value to "strt_buffer" (still a global in
	"tree" module).
	(mpi_amr_read_prol_comm): ditto.
	(mpi_amr_read_flux_comm): ditto.
	(mpi_amr_read_restrict_comm): ditto.

	* source/mpi_amr_comm_setup.F90: include
	"Flashx_mpi_implicitNone.fh". added ONLY to "use tree". added USE
	for "gr_pmCommDataTypes", "gr_pmCommPatternData".
	(mpi_amr_comm_setup): moved and updated  some code producing DEBUG output.
	(mpi_amr_comm_setup): introduced local pointer "pat". activate the
	appropriate comm pattern, and have "pat" point to it. pass "pat" to
	various called subroutines.

	* source/amr_mpi_find_blk_in_buffer.F90
	(amr_mpi_find_blk_in_buffer): adjusted DEBUG code, since global
	"pe_source" is now gone.

	* source/amr_initialize.F90: updated RoboDocs.
	(amr_initialize): add "use gr_pmCommPatternData".
	(amr_initialize): include "Flashx_mpi_implicitNone.fh".
	(amr_initialize): do not allocate "laddress" arrays.
	initialize "gr_theActiveCommPattern" instead of global "commatrix_recv", "commatrix_send".

	* source/amr_close.F90 (amr_close): nullify instead of deallocate "laddress".
	(amr_close): removed some more deallocations.

	* source/amr_1blk_guardcell_reset.F90 (amr_1blk_guardcell_reset):
	removed unused USE.

	* source/amr_1blk_cc_cp_remote.F90: tweaked RoboDoc info.
	(amr_1blk_cc_cp_remote): include "Flashx_mpi_implicitNone.fh".
	added ONLY for "use mpi_morton".

	* source/UNUSED/mpi_unpack_tree_info.F90: moved to UNUSED.

	* source/UNUSED/mpi_pack_tree_info.F90: moved to UNUSED.

	* headers/tree.F90 (tree): laddress is now a POINTER instead of an
	ALLOCATABLE array.

	* headers/paramesh_mpi_interfaces.F90: include "FortranLangFeatures.fh".
	(paramesh_mpi_interfaces): subroutine interfaces
	"mpi_pack_blocks", "mpi_Sbuffer_size", "mpi_pack_edges",
	"mpi_pack_fluxes", "mpi_Rbuffer_size", "mpi_xchange_blocks",
	"process_fetch_list" now have "pattern" first arguments".
	(paramesh_mpi_interfaces): subroutine interfaces
	"mpi_unpack_blocks", "mpi_unpack_edges", "mpi_unpack_fluxes" now
	have "commatrixRecv" first arguments.
	(paramesh_mpi_interfaces): subroutine interfaces
	"mpi_pack_tree_info", "mpi_unpack_tree_info"  disabled by default.
	(paramesh_mpi_interfaces): subroutine interface
	"process_fetch_list" removed.

	* headers/mpi_morton.F90 (mpi_morton): removed lots of (mostly)
	array variables, most now unused because replaced by
	gr_pmCommPattern_t structures, some unused even before.
	including arrays named "commatrix_*", "to_be_*", etc.

	* headers/gr_pmCommPatternData.F90: created.

	* headers/gr_pmCommDataTypes.F90: added.
	(gr_pmCommDataTypes): changed order of some elements in gr_pmCommPattern_t.
	renamed "max_no_to_send" to "num_recipient_pes". added "valid" flag.
	(gr_pmCommDataTypes): changed comment on unused "pe_source".

	* headers/Makefile (Grid): created.

	* flash_avoid_orrery/amr_initialize.F90: updated RoboDocs.
	(amr_initialize): add "use gr_pmCommPatternData".
	(amr_initialize): include "Flashx_mpi_implicitNone.fh".
	(amr_initialize): do not allocate "laddress" arrays.
	initialize "gr_theActiveCommPattern" instead of global "commatrix_recv", "commatrix_send".

	* bittree/amr_initialize.F90: updated RoboDocs.
	(amr_initialize): add "use gr_pmCommPatternData".
	(amr_initialize): include "Flashx_mpi_implicitNone.fh".
	(amr_initialize): do not allocate "laddress" arrays.
	initialize "gr_theActiveCommPattern" instead of global "commatrix_recv", "commatrix_send".

2022-02-21  Klaus Weide  <kweide>

	* Reorganize source under Paramesh4 so that PARAMESH and derived
	software that should be subject to the PARAMESH_USERS_AGREEMENT is
	located in and under the PM4_package subdirectory.

2022-02-16  Klaus Weide  <kweide>

	* updated copyright and license notices in some source files

2004 - 2020-06-30  University of Chicago

	* Customizations of PARAMESH code for FLASH versions 2, 3, and 4

2016-09     Marcos Vanella

	* Paramesh4/Incomp/amr_restrict_fc_ins.F90: Adapted for INS

2016-09     Klaus Weide  <kweide>

	*
	Paramesh4/amr_restrict_fc_ins.F90:
	Named _ins
	* Paramesh4/Incomp/amr_restrict_fc_ins.F90: 
	Named _ins

2016-09     Klaus Weide  <kweide>

	*
	Paramesh4/interpolation/prolong/amr_1blk_cc_prol_gen_work_fun.F90:
	handle interp=30..32

2010        Chris Daley

	* Paramesh4/flash_avoid_orrery/mpi_amr_exchange_nodetype.F90: created

3/27/07 K. Olson removed ALL reference to 'LIBRARY'.


2/1/07  K. Olson removed ALL references to 'shmem'.


1/24/07 K. Olson removed all references to MPI_USED in the PARAMESH source tree


2006-09     Klaus Weide  <kweide>

	* Paramesh4/interpolation/prolong/amr_1blk_cc_prol_gen_work_fun.F90: Modified

2004-02     Kevin Olson

	* Paramesh4/Incomp/amr_restrict_fc_ins.F90: Written
